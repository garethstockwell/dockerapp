#!/usr/bin/env python

import argparse
import os
import sys

sys.path.append(os.path.join(
        os.path.dirname(sys.argv[0]),
        os.pardir, 'lib'))

import dockerapp
from dockerapp import log


def add_standard_arguments(parser):
    verbosity = parser.add_mutually_exclusive_group()

    verbosity.add_argument(
            '-v', '--verbose',
            dest = 'verbose',
            default = False,
            action = 'store_true',
            help = 'show verbose output')

    verbosity.add_argument(
            '-q', '--quiet',
            dest = 'quiet',
            default = False,
            action = 'store_true',
            help = 'suppress output')


class ArgumentParser(argparse.ArgumentParser):
    def __init__(self):
        argparse.ArgumentParser.__init__(
                self,
                description='Docker app management script',
                formatter_class=argparse.ArgumentDefaultsHelpFormatter)

        add_standard_arguments(self)

        self.subparsers = self.add_subparsers(
                    parser_class = argparse.ArgumentParser)

        self.allow_unknown_args = True


class Program(object):
    def __init__(self):
        self.parser = ArgumentParser()

    def add_command(self, name):
        module_name = 'dockerapp.command.' + name.replace('-', '_')

        import dockerapp.util
        module = dockerapp.util.import_module(module_name)

        parser = self.parser.subparsers.add_parser(name)
        add_standard_arguments(parser)

        module.init_parser(parser)

        parser.set_defaults(_command = module, _subparser = parser)

    def run(self):
        args, unknown_args = self.parser.parse_known_args()
        log.init(verbose=args.verbose, quiet=args.quiet)
        args._command.run(args, unknown_args)

try:
    p = Program()
    p.add_command('build')
    p.add_command('list')
    p.add_command('run')
    p.run()

except Exception as e:
    sys.stderr.write('Error: ' + str(e) + '\n')
    sys.exit(1)

